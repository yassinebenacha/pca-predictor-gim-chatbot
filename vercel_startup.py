#!/usr/bin/env python3
"""
Script de d√©marrage pour Vercel
Configure les mod√®les selon l'environnement
"""

import os
import sys
import subprocess

def install_requirements():
    """Installe les d√©pendances"""
    print("üì¶ Installation des d√©pendances...")
    try:
        subprocess.check_call([sys.executable, "-m", "pip", "install", "-r", "requirements.txt"])
        print("‚úÖ D√©pendances install√©es")
        return True
    except Exception as e:
        print(f"‚ùå Erreur installation: {e}")
        return False

def setup_models():
    """Configure les mod√®les pour Vercel"""
    print("üîß Configuration des mod√®les pour Vercel...")
    
    # V√©rifier si on est sur Vercel
    is_vercel = os.environ.get('VERCEL', False) or os.environ.get('VERCEL_ENV', False)
    hf_repo = os.environ.get('HF_REPO', None)
    
    if is_vercel:
        print("üåê Environnement Vercel d√©tect√©")
        
        if hf_repo:
            print(f"ü§ó Repository Hugging Face configur√©: {hf_repo}")
            # Tester la connexion HF
            try:
                from transformers import DistilBertTokenizer
                tokenizer = DistilBertTokenizer.from_pretrained(hf_repo)
                print("‚úÖ Mod√®le DistilBERT accessible depuis HF Hub")
            except Exception as e:
                print(f"‚ö†Ô∏è Erreur acc√®s HF Hub: {e}")
                print("üîÑ Fallback vers RandomForest")
        else:
            print("‚ö†Ô∏è HF_REPO non configur√©, utilisation de RandomForest uniquement")
    
    # Cr√©er les mod√®les de base
    try:
        from setup_models import create_basic_models
        create_basic_models()
        print("‚úÖ Mod√®les de base cr√©√©s")
    except Exception as e:
        print(f"‚ùå Erreur cr√©ation mod√®les: {e}")
        return False
    
    return True

def main():
    """Fonction principale"""
    print("üöÄ D√©marrage Vercel - Configuration PCA Predictor")
    
    # Installation des d√©pendances
    if not install_requirements():
        sys.exit(1)
    
    # Configuration des mod√®les
    if not setup_models():
        sys.exit(1)
    
    print("‚úÖ Configuration Vercel termin√©e avec succ√®s!")
    
    # Afficher les informations de configuration
    print("\nüìä Configuration actuelle:")
    print(f"VERCEL: {os.environ.get('VERCEL', 'Non')}")
    print(f"VERCEL_ENV: {os.environ.get('VERCEL_ENV', 'Non d√©fini')}")
    print(f"HF_REPO: {os.environ.get('HF_REPO', 'Non configur√©')}")
    print(f"PYTHONPATH: {os.environ.get('PYTHONPATH', 'Non d√©fini')}")

if __name__ == "__main__":
    main()
