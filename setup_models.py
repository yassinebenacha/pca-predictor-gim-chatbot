#!/usr/bin/env python3
"""
Script de configuration des mod√®les pour le d√©ploiement
Cr√©e les mod√®les de base si ils n'existent pas
Support pour RandomForest et DistilBERT depuis Hugging Face
"""

import os
import pickle
import json
import pandas as pd
from sklearn.ensemble import RandomForestClassifier
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.preprocessing import LabelEncoder

# Import conditionnel pour transformers
try:
    from transformers import DistilBertTokenizer, DistilBertForSequenceClassification
    TRANSFORMERS_AVAILABLE = True
except ImportError:
    TRANSFORMERS_AVAILABLE = False

def create_basic_models():
    """Cr√©e des mod√®les de base pour le d√©ploiement"""

    # Cr√©er le dossier models s'il n'existe pas
    os.makedirs("models", exist_ok=True)

    # Donn√©es d'exemple pour cr√©er les mod√®les
    sample_data = [
        "P0420 Catalyst System Efficiency Below Threshold",
        "P0171 System Too Lean",
        "P0300 Random/Multiple Cylinder Misfire Detected",
        "P0442 Evaporative Emission Control System Leak Detected",
        "P0128 Coolant Thermostat"
    ]

    sample_labels = [
        "Replace Catalytic Converter",
        "Check Air Filter and MAF Sensor",
        "Replace Spark Plugs",
        "Check EVAP System",
        "Replace Thermostat"
    ]

    # Cr√©er et sauvegarder le vectorizer
    vectorizer = TfidfVectorizer(max_features=1000, stop_words='english')
    X = vectorizer.fit_transform(sample_data)

    with open("models/vectorizer.pkl", "wb") as f:
        pickle.dump(vectorizer, f)

    # Cr√©er et sauvegarder le label encoder
    label_encoder = LabelEncoder()
    y = label_encoder.fit_transform(sample_labels)

    with open("models/label_encoder.pkl", "wb") as f:
        pickle.dump(label_encoder, f)

    # Cr√©er et sauvegarder le mod√®le
    model = RandomForestClassifier(n_estimators=100, random_state=42)
    model.fit(X, y)

    with open("models/model.pkl", "wb") as f:
        pickle.dump(model, f)

    print("‚úÖ Mod√®les RandomForest de base cr√©√©s avec succ√®s")

def check_distilbert_model():
    """V√©rifie si le mod√®le DistilBERT est disponible et fonctionnel"""

    if not TRANSFORMERS_AVAILABLE:
        print("‚ùå Transformers non disponible. Installez avec: pip install transformers torch")
        return False

    distilbert_dir = "distilbert_pca_model"

    # V√©rifier les fichiers requis
    required_files = [
        "config.json",
        "model.safetensors",
        "tokenizer_config.json",
        "vocab.txt",
        "label_mapping.json"
    ]

    missing_files = []
    for file in required_files:
        if not os.path.exists(os.path.join(distilbert_dir, file)):
            missing_files.append(file)

    if missing_files:
        print(f"‚ùå Fichiers DistilBERT manquants: {', '.join(missing_files)}")
        return False

    try:
        # Test de chargement
        tokenizer = DistilBertTokenizer.from_pretrained(distilbert_dir)
        model = DistilBertForSequenceClassification.from_pretrained(distilbert_dir)

        # V√©rifier le label mapping
        with open(os.path.join(distilbert_dir, "label_mapping.json"), 'r') as f:
            label_mapping = json.load(f)

        print(f"‚úÖ Mod√®le DistilBERT disponible avec {len(label_mapping)} classes")
        print(f"‚úÖ Mod√®le configur√© pour {model.config.num_labels} labels")

        return True

    except Exception as e:
        print(f"‚ùå Erreur lors du test DistilBERT: {e}")
        return False

def setup_deployment():
    """Configure les mod√®les pour le d√©ploiement"""
    print("üöÄ Configuration des mod√®les pour le d√©ploiement...")

    # Cr√©er les mod√®les RandomForest de base
    create_basic_models()

    # V√©rifier DistilBERT
    distilbert_available = check_distilbert_model()

    print("\nüìä R√©sum√© de la configuration:")
    print("‚úÖ RandomForest: Disponible")
    print(f"{'‚úÖ' if distilbert_available else '‚ùå'} DistilBERT: {'Disponible' if distilbert_available else 'Non disponible'}")

    if distilbert_available:
        print("\nüéØ Recommandation: Utilisez DistilBERT pour de meilleures performances")
    else:
        print("\nüéØ Recommandation: Utilisez RandomForest (plus rapide, fonctionne hors ligne)")

    return distilbert_available

if __name__ == "__main__":
    setup_deployment()
