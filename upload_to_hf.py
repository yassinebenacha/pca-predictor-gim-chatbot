#!/usr/bin/env python3
"""
Script pour uploader le mod√®le DistilBERT vers Hugging Face Hub
"""

import os
from huggingface_hub import HfApi, create_repo
import json

def upload_model_to_hf():
    """Upload le mod√®le vers Hugging Face Hub"""
    
    # Configuration
    model_dir = "distilbert_pca_model"
    repo_name = "yassinebenacha/pca-distilbert-automotive"  # Changez selon votre username
    
    print(f"üöÄ Upload du mod√®le vers Hugging Face Hub: {repo_name}")
    
    # V√©rifier que le mod√®le existe
    if not os.path.exists(model_dir):
        print(f"‚ùå Dossier {model_dir} non trouv√©")
        return False
    
    try:
        # Initialiser l'API HF
        api = HfApi()
        
        # Cr√©er le repository (si il n'existe pas)
        try:
            create_repo(repo_name, exist_ok=True)
            print(f"‚úÖ Repository {repo_name} cr√©√©/v√©rifi√©")
        except Exception as e:
            print(f"‚ö†Ô∏è Repository existe d√©j√† ou erreur: {e}")
        
        # Fichiers √† uploader
        files_to_upload = [
            "config.json",
            "model.safetensors", 
            "tokenizer_config.json",
            "vocab.txt",
            "label_mapping.json",
            "special_tokens_map.json"
        ]
        
        # Upload des fichiers
        for file_name in files_to_upload:
            file_path = os.path.join(model_dir, file_name)
            if os.path.exists(file_path):
                print(f"üì§ Upload de {file_name}...")
                api.upload_file(
                    path_or_fileobj=file_path,
                    path_in_repo=file_name,
                    repo_id=repo_name,
                    repo_type="model"
                )
                print(f"‚úÖ {file_name} upload√©")
            else:
                print(f"‚ö†Ô∏è {file_name} non trouv√©")
        
        # Cr√©er un README
        readme_content = f"""---
language: en
tags:
- automotive
- diagnostic
- pca
- distilbert
license: mit
---

# PCA Predictor DistilBERT Model

Ce mod√®le DistilBERT a √©t√© fine-tun√© pour pr√©dire les solutions techniques (PCA) dans le diagnostic automobile.

## Utilisation

```python
from transformers import DistilBertTokenizer, DistilBertForSequenceClassification

tokenizer = DistilBertTokenizer.from_pretrained("{repo_name}")
model = DistilBertForSequenceClassification.from_pretrained("{repo_name}")

# Exemple de pr√©diction
text = "P0420 Catalyst System Efficiency Below Threshold"
inputs = tokenizer(text, return_tensors="pt")
outputs = model(**inputs)
```

## Classes

Ce mod√®le pr√©dit parmi 178 classes PCA diff√©rentes pour le diagnostic automobile.

## Performance

- **Accuracy**: Optimis√© pour le diagnostic automobile
- **Classes**: 178 solutions techniques (PCA)
- **Dataset**: Diagnostic automobile augment√©
"""
        
        # Upload du README
        api.upload_file(
            path_or_fileobj=readme_content.encode(),
            path_in_repo="README.md",
            repo_id=repo_name,
            repo_type="model"
        )
        
        print(f"‚úÖ Mod√®le upload√© avec succ√®s sur: https://huggingface.co/{repo_name}")
        print(f"üîó Utilisez ce repo dans votre app: {repo_name}")
        
        return repo_name
        
    except Exception as e:
        print(f"‚ùå Erreur lors de l'upload: {e}")
        print("üí° Assurez-vous d'√™tre connect√© avec: huggingface-cli login")
        return False

if __name__ == "__main__":
    print("üì§ Upload du mod√®le DistilBERT vers Hugging Face Hub")
    print("‚ö†Ô∏è Assurez-vous d'√™tre connect√© avec: huggingface-cli login")
    
    repo_name = upload_model_to_hf()
    
    if repo_name:
        print(f"\nüéØ Prochaines √©tapes:")
        print(f"1. V√©rifiez votre mod√®le sur: https://huggingface.co/{repo_name}")
        print(f"2. Utilisez ce repo dans votre app Vercel")
        print(f"3. Configurez la variable d'environnement HF_REPO={repo_name}")
    else:
        print("\n‚ùå Upload √©chou√©. V√©rifiez votre connexion Hugging Face.")
